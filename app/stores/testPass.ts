import { defineStore } from 'pinia'
import { ref } from 'vue'

export interface TestPassState {
  testId: string
  currentSectionIndex: number
  currentQuestionIndex: number
  userAnswers: Record<string, UserAnswer>
  startTime: string
  lastSaveTime: string
  isCompleted: boolean
  timeSpent: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

export const useTestPassStore = defineStore('testPass', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const currentTestPass = ref<TestPassState | null>(null)
  const test = ref<Test | null>(null)
  const originalTest = ref<Test | null>(null) // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
  const autoSaveInterval = ref<NodeJS.Timeout | null>(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
  const initializeFromStorage = () => {
    if (import.meta.client) {
      const savedTestPass = localStorage.getItem('nfactorial-quiz-test-pass')
      const savedTest = localStorage.getItem('nfactorial-quiz-test-data')
      
      if (savedTestPass) {
        try {
          currentTestPass.value = JSON.parse(savedTestPass)
        } catch (error) {
          console.error('Error parsing saved test pass:', error)
          localStorage.removeItem('nfactorial-quiz-test-pass')
        }
      }
      
      if (savedTest) {
        try {
          test.value = JSON.parse(savedTest)
        } catch (error) {
          console.error('Error parsing saved test data:', error)
          localStorage.removeItem('nfactorial-quiz-test-data')
        }
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  const saveToStorage = () => {
    if (import.meta.client && currentTestPass.value) {
      localStorage.setItem('nfactorial-quiz-test-pass', JSON.stringify(currentTestPass.value))
      if (test.value) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const safeTest = sanitizeTestForClient(test.value)
        localStorage.setItem('nfactorial-quiz-test-data', JSON.stringify(safeTest))
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const sanitizeTestForClient = (originalTest: Test): Test => {
    return {
      ...originalTest,
      questions: originalTest.questions.map(question => ({
        ...question,
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        correctAnswerIds: [],
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è UI
        correctAnswersCount: question.correctAnswerIds?.length || 0,
        explanation: undefined,
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤
        answers: question.answers.map(answer => ({
          id: answer.id,
          text: answer.text,
          description: answer.description
        }))
      }))
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è
  const startTest = (testData: Test) => {
    const now = new Date().toISOString()
    
    currentTestPass.value = {
      testId: testData.id,
      currentSectionIndex: 0,
      currentQuestionIndex: 0,
      userAnswers: {},
      startTime: now,
      lastSaveTime: now,
      isCompleted: false,
      timeSpent: 0
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    test.value = sanitizeTestForClient(testData)
    originalTest.value = testData // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    
    saveToStorage()
    startAutoSave()
  }

  const updateCurrentPosition = (sectionIndex: number, questionIndex: number) => {
    if (currentTestPass.value) {
      currentTestPass.value.currentSectionIndex = sectionIndex
      currentTestPass.value.currentQuestionIndex = questionIndex
      saveToStorage()
    }
  }

  const saveAnswer = (questionId: string, answerIds: string[]) => {
    if (currentTestPass.value) {
      currentTestPass.value.userAnswers[questionId] = {
        questionId,
        answerIds
      }
      
      saveToStorage()
    }
  }

  const completeTest = () => {
    if (currentTestPass.value) {
      currentTestPass.value.isCompleted = true
      currentTestPass.value.timeSpent = Math.floor(
        (Date.now() - new Date(currentTestPass.value.startTime).getTime()) / 1000
      )
      saveToStorage()
      stopAutoSave()
    }
  }

  const clearTest = () => {
    currentTestPass.value = null
    test.value = null
    originalTest.value = null
    stopAutoSave()
    
    if (import.meta.client) {
      localStorage.removeItem('nfactorial-quiz-test-pass')
      localStorage.removeItem('nfactorial-quiz-test-data')
    }
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const startAutoSave = () => {
    if (autoSaveInterval.value) {
      clearInterval(autoSaveInterval.value)
    }
    
    autoSaveInterval.value = setInterval(() => {
      if (currentTestPass.value) {
        console.log('üîÑ AutoSave: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∞...', {
          testId: currentTestPass.value.testId,
          answeredQuestions: Object.keys(currentTestPass.value.userAnswers).length,
          timeSpent: Math.floor(
            (Date.now() - new Date(currentTestPass.value.startTime).getTime()) / 1000
          )
        })
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        currentTestPass.value.lastSaveTime = new Date().toISOString()
        currentTestPass.value.timeSpent = Math.floor(
          (Date.now() - new Date(currentTestPass.value.startTime).getTime()) / 1000
        )
        
        saveToStorage()
        
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        // await api.saveTestProgress(currentTestPass.value)
      }
    }, 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
  }

  const stopAutoSave = () => {
    if (autoSaveInterval.value) {
      clearInterval(autoSaveInterval.value)
      autoSaveInterval.value = null
    }
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const hasActiveTest = computed(() => 
    currentTestPass.value !== null && !currentTestPass.value.isCompleted
  )

  const currentQuestion = computed(() => {
    if (!test.value || !currentTestPass.value) return null
    
    const sections = test.value.sections
    const currentSection = sections[currentTestPass.value.currentSectionIndex]
    if (!currentSection) return null
    
    const questionsInSection = test.value.questions.filter(q => 
      test.value!.questionSectionLinks.some((link: QuestionSectionLink) => 
        link.questionId === q.id && link.sectionId === currentSection.id
      )
    )
    
    return questionsInSection[currentTestPass.value.currentQuestionIndex] || null
  })

  const totalQuestions = computed(() => {
    if (!test.value) return 0
    return test.value.questions.length
  })

  const answeredQuestionsCount = computed(() => {
    if (!currentTestPass.value) return 0
    return Object.keys(currentTestPass.value.userAnswers).length
  })

  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤
  const questionStatuses = computed(() => {
    if (!test.value || !currentTestPass.value) {
      return {}
    }

    const statuses: Record<string, 'outline' | 'primary' | 'success' | 'error'> = {}
    
    test.value.questions.forEach(q => {
      statuses[q.id] = getQuestionStatus(q.id)
    })
    
    return statuses
  })

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  const isAnswerCorrect = (questionId: string): boolean => {
    if (!originalTest.value || !currentTestPass.value) return false
    
    const question = originalTest.value.questions.find(q => q.id === questionId)
    const userAnswer = currentTestPass.value.userAnswers[questionId]
    
    if (!question || !userAnswer || !question.correctAnswerIds) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
    if (userAnswer.answerIds.length !== question.correctAnswerIds.length) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    return question.correctAnswerIds.every(correctId => 
      userAnswer.answerIds.includes(correctId)
    )
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
  const getQuestionStatus = (questionId: string): 'outline' | 'primary' | 'success' | 'error' => {
    if (!currentTestPass.value) return 'outline'
    
    const userAnswer = currentTestPass.value.userAnswers[questionId]
    const currentQ = currentQuestion.value
    
    if (!userAnswer) {
      // –ù–µ –æ—Ç–≤–µ—á–µ–Ω
      if (currentQ && currentQ.id === questionId) {
        return 'primary' // –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
      }
      return 'outline'
    }
    
    // –û—Ç–≤–µ—á–µ–Ω
    if (currentQ && currentQ.id === questionId) {
      return 'primary' // –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    }
    
    // –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤—Å–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ"
    if (!currentTestPass.value.isCompleted) {
      return 'success' // –û—Ç–≤–µ—á–µ–Ω (–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å)
    }
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    return isAnswerCorrect(questionId) ? 'success' : 'error'
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store
  if (import.meta.client) {
    initializeFromStorage()
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    currentTestPass,
    test,
    originalTest,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    hasActiveTest,
    currentQuestion,
    totalQuestions,
    answeredQuestionsCount,
    questionStatuses,
    
    // –ú–µ—Ç–æ–¥—ã
    startTest,
    updateCurrentPosition,
    saveAnswer,
    completeTest,
    clearTest,
    startAutoSave,
    stopAutoSave,
    isAnswerCorrect,
    getQuestionStatus
  }
}) 